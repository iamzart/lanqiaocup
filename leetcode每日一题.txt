leetcode每日一题
掘金
github 攒小绿点

/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
//思路1：先反转再比较
//思路2：投机取巧，定义一个数组，遍历链表过程中，一边用计数器记录数组元素，一边把链表的数据域存到数组中，在数字里left++，right--这样判断
//思路3：找中间结点，把中间结点作为链表的新结点，反转中间结点带领的新链表，挨个比较
class PalindromeList {
public:
ListNode* midnode(ListNode* head)
{
    ListNode* slow = head;
        ListNode* fast = head;
        while(fast&&fast->next)
        {
            slow = slow->next;
            fast = fast->next->next;//慢一步快两步
        }//跳出循环时，slow就是中间结点
        return slow;
}
//反转链表返回mid为头的链表
ListNode* reverse(ListNode* mid)
{
    if(mid == NULL)
    return mid; 
    ListNode* pcur = mid;
    while(pcur->next)
        {
            pcur->next = pcur;
            pcur = pcur->next;
        }//此时pcur是最后一个结点
        return pcur;
}
    bool chkPalindrome(ListNode* A) {
        // write code here
        
        while(pcur)
        {
            if(pcur->val != A->val)
            {
                return false;
            }
            else {
            {
                pcur = pcur->next;
                A = A->next;
            }
            }
        }return true;

    }
};