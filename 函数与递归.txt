函数与递归

函数式完成某一个特定任务的一小段代码

函数实参和形参名字想不想同都可以
数组传参实参写数组名，形参写数组形式
个数要匹配
一维数组大小可以省略
二维数组行能省略，列不行，说的是形参，因为实参只写数组名
数组传参，形参不会创建新数组，形参和实参操作的数组是同一个数组

变量传参会创建新空间
数组不会
对于字符串也是创建了新空间

在软件工程中，基本都用局部变量

return 是彻底结束
break只是跳出循环

/*函数生命：
把函数头拿上来放个分号
1.函数要满足先声明后使用
2.函数的定义也是一种声明

声明只要在函数前
函数声明是变量名和形参可省略

传值调用：指针 或者 引用

引用：
类型& 引用变量名 = 引用实体
引用和引用的变量用的同一块内存
******
引用的必须初始化
可以给某个变量取多个别名，有多个引用
引用一旦引用一个实体，就不能引用别的
传引用调用

swap函数
include<utility>
可以交换变量，也可以交换数组，直接传输组名就好
字符串也可以
引用的效率高，不用再开辟空间
数组传参不用引用


/*函数重载 是指在同一个作用域中可以有多个重名的函数，他们的函数名相同，但函数列表不同
函数列表：
函数返回类型 函数名（参数1，参数2）；
这里的不同是指参数的数量、类型，或顺序至少有一个不同，返回类型不影响重载
主要是函数名相同，参数类型不同，传不同的参数就行
编译器会根据调用函数时传递的参数类型，自动推导用哪个函数
函数重载用于函数功能差不多，就是参数不一样，就可以来一个重载


max min函数
#include<aogorithm>
参数就是要比较的两个数字
可默认，可自定义
自定义：返回布尔值，表示第一个参数是否小于第二个参数，要自己写一个比较函数
max函数里有三个参数，第三个是比较函数的函数名
min同上
















