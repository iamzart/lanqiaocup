指针和动态内存管理

内存单元编号==地址==指针

指针变量就是用来存放地址的

int*
*说明pa是指针变量
int说明pa指向的变量类型是int型

指针变量不仅可以表示地址，通过解引用可以找到它指向的对象，可以改变他，比起直接改变，多了一种改变的途径

空指针不能解引用，空指针没有指向有效的空间

-----------------------------------------------------------------------------

指针类型的意义

**解引用

（打印地址用printf）%p

指针的类型决定了向前/向后走一步有多大距离
（指针+-整数）
int* 的指针+1，是跳过一个int型的变量
char*的指针，是跳过一个char类型的变量

int* p1 ：
p1+1---> +1*（sizeof（int））

-----------------------------------------------------------------------------

void* 指针 -- 无具体类型
不能加减，也不能解引用

p++  ：p不断向后，已经找不到他的起始位置了
p+i   ： p没变

/*
随着下标的增长，地址由低到高
数组在指针中是连续存放的
指针的运算（与整数）
解引用 这俩都依赖于指针的类型
*/

******************************************************************
动态内存管理

栈区：局部变量，形参
堆区：动态内存管理 new/delete
静态区：全局变量，静态变量

动态申请一个int类型的空间
int * ptr1 = new int;
动态申请一个int类型的空间并初始化为10
int * ptr2 = new int(10);
动态申请10个int类型的空间
int * ptr3 = new arr[10];

释放内存空间
delete ptr1;
ptr1 = NULL;
delete[ ] ptr3;

new负责申请内存，new操作符返回的是申请到的空间的起始地址，需要指针存放
new申请一个变量的空间，new【】申请一个数组的空间

delete负责释放/回收内存

new和delete配对 new【】和delete【】配对

*（p+i）= i+1

int* ptr3 = arr[];
ptr3指向首元素的地址，可以当数组名用加【】

new[ ]之乡的空间是连续的，数组也是，所以ptr指向的空间可以使用数组的形式访问

























