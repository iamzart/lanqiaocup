二叉树

二叉树的概念：每个节点最多只有两颗子树
二叉树不存在度大于二的节点
二叉树的子树有左右之分，不能颠倒，是有序树
一个左孩子，一个右孩子

满二叉树：
所有的非叶节点都有左右孩子，所有叶子节点都在同一层
性质：（帮助我们存储二叉树）
高度为h的满二叉树，节点个数为2^h-1
结点个数为n的满二叉树，树高为h = log 以二为底n的对数+1
如果将满二叉树按照层序即便里的过程（BFS）编号，从根节点开始，由1开始
* 结点为i的左孩子编号为2*i
节点为i的右孩子编号为2*i+1
节点为i的双亲编号为i/2

完全二叉树：
相当于在满二叉树的基础上，从后往前依次连续删掉一些节点

/*二叉树的存储*/
vector：先尾插左孩子，再尾插右孩子
链式：先头插左孩子，再头插右孩子，这样的话，连理的时候先遇到右孩子
除了vector和链式前向星，

**顺序存储：
因为性质：每个结点的编号都可以被计算出来，所以按照编号一次放在数组对应下标的位置，通过计算可以找到左右孩子和父亲
如果不是满二叉树，就先把这棵树补全，不然无法计算找到
缺点：如果特别不全，就会浪费空间

**链式存储

用两个数组，l[N],r[N],表示结点号为i的左右孩子编号

/*二叉树的遍历*/
先序遍历，中序遍历，后序遍历
不同在于：处理根节点的时机
根左右
左根右
左右根






































